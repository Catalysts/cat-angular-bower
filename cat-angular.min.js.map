{"version":3,"sources":["controller/cat-base-detail-controller.js","controller/cat-base-list-controller.js","controller/cat-base-tabs-controller.js","directives/cat-select.js","service/cat-api-service.js","service/cat-breadcrumbs-service.js","service/cat-i18n-locale-service.js","service/cat-i18n-message-source-service.js","service/cat-i18n-service.js","service/cat-route-service.js","service/cat-select-config-service.js","service/cat-view-service.js","service/main-menu-service.js","module.js","base/Facet.js","base/SearchRequest.js","directives/cat-autofocus.js","directives/cat-checkbox.js","directives/cat-confirm-click.js","directives/cat-facets.js","directives/cat-field-errors.js","directives/cat-i18n.js","directives/cat-inputs.js","directives/cat-load-more.js","directives/cat-main-menu.js","directives/cat-paginated.js","directives/cat-sortable.js","directives/form.js","directives/numbers-only.js","filters/cat-replacetext.js","service/cat-list-data-loading-service.js","service/http-interceptor.js","service/loading-service.js","service/message-service.js","i18n/cat-i18n-translations_de.js","i18n/cat-i18n-translations_en.js","util/cat-naming-util.js","util/cat-route-util.js"],"names":[],"mappings":"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","file":"cat-angular.min.js","sourcesContent":["\n\n/**\n * @ngdoc function\n *\n * @description\n * The CatBaseDetailController takes care of providing several common properties and functions to the scope\n * of every detail page. It also instantiates the controller given via the config.controller parameter and shares\n * the same scope with it.\n *\n * Common properties include:\n * * detail - the actual object to view\n * * editDetail - a copy of the detail object used for editing\n * * breadcrumbs - the breadcrumbs array\n * * uiStack - the ui stack array if parents exist\n * * editTemplate - the url of the edit template\n * * mainViewTemplate - the url of the main view template\n * * additionalViewTemplate - the url of the additional view template if it exists\n * * $fieldErrors - a map of validation errors returned by the server\n *\n * Common functions include:\n * * save - the save function to update / create an object\n * * edit - a function to switch from view to edit mode\n * * cancelEdit - a function to switch from edit to view mode (discarding all changes)\n * * add - a function to switch into edit mode of a new object\n * * remove - a function to delete the current object\n * * title - a function to resolve a 'title' of the current object\n *\n * @param $scope\n * @param $routeParams\n * @param $location\n * @param $window\n * @param $globalMessages\n * @param $controller\n * @param $log\n * @param catBreadcrumbsService\n * @param {Object} config holds data like the current api endpoint, template urls, base url, the model constructor, etc.\n * @constructor\n */\nfunction CatBaseDetailController($scope, $routeParams, $location, $window, $globalMessages, $controller, $log, catBreadcrumbsService, config) {\n    $scope.detail = config.detail;\n    $scope.editDetail = undefined;\n    $scope.$fieldErrors = {};\n\n    var endpoint = config.endpoint;\n    var baseUrl = config.baseUrl;\n    var templateUrls = config.templateUrls;\n    var Model = config.Model;\n\n    $scope.uiStack = catBreadcrumbsService.generateFromConfig(config);\n\n    if ($routeParams.id === 'new') {\n        catBreadcrumbsService.push({\n            title: 'New',\n            key: 'cc.catalysts.general.new'\n        });\n    } else {\n        catBreadcrumbsService.push({});\n    }\n\n    $scope.editTemplate = templateUrls.edit;\n\n    if (_.isObject(templateUrls.view)) {\n        $scope.mainViewTemplate = templateUrls.view.main;\n        $scope.additionalViewTemplate = templateUrls.view.additional;\n    } else {\n        $scope.mainViewTemplate = templateUrls.view;\n    }\n\n    $scope.baseUrl = baseUrl;\n\n    /**\n     * @returns {String|Number} A title of the current object or the 'id' as fallback\n     */\n    $scope.title = function () {\n        var data = $scope.detail;\n        if (_.isUndefined(data)) {\n            return '';\n        }\n        return !!data.breadcrumbTitle ? data.breadcrumbTitle() : (!!data.name ? data.name : data.id);\n    };\n\n    var update = function () {\n        catBreadcrumbsService.replaceLast({\n            title: $scope.title()\n        });\n    };\n\n    /**\n     * reloads the current object from the server\n     */\n    var reload = function () {\n        endpoint.get($routeParams.id).then(function (data) {\n            $scope.detail = data;\n            update();\n        });\n    };\n\n    $scope.reloadDetails = reload;\n\n    $scope.exists = !!$routeParams.id && $routeParams.id !== 'new';\n\n    /**\n     * Creates a new copy of the given model and sets its parent if applicable.\n     * Triggers a switch into the edit mode\n     */\n    $scope.add = function () {\n        $scope.editDetail = new Model();\n        if (_.isFunction($scope.editDetail.setParent)) {\n            $scope.editDetail.setParent(config.parents[0]);\n        }\n    };\n\n    /**\n     * Creates a copy of the current object and triggers a switch into edit mode\n     */\n    $scope.edit = function () {\n        $scope.editDetail = angular.copy($scope.detail);\n        if (_.isFunction($scope.editDetail.setParent)) {\n            $scope.editDetail.setParent(config.parents[0]);\n        }\n    };\n\n    /**\n     * Either cancels the current edit of an object by resetting it or triggers a history back event if the 'new' mode\n     * is active\n     */\n    $scope.cancelEdit = function () {\n        $scope.$broadcast('formReset');\n        if ($scope.exists) {\n            $scope.editDetail = undefined;\n            $globalMessages.clearMessages();\n            $scope.$fieldErrors = undefined;\n        } else {\n            $window.history.back();\n        }\n    };\n\n    /**\n     * Calls the remove function of the current endpoint and redirects to the given baseUrl upon success\n     */\n    $scope.remove = function () {\n        endpoint.remove($scope.detail.id).then(function () {\n            if (_.isEmpty($scope.uiStack)) {\n                $location.path(baseUrl);\n            } else {\n                var parentUrl = $scope.uiStack[$scope.uiStack.length - 1].url;\n                $location.path(parentUrl.substring(1, parentUrl.indexOf('?')));\n                $location.search('tab', endpoint.getEndpointName());\n            }\n        });\n    };\n\n    /**\n     * Calls the save function of the current endpoint.\n     * Upon success the view mode of the details of the currently created / updated object will be shown.\n     * Upon an error the reported errors (global & field errors) will be shown to the user and the edit mode\n     * will remain active.\n     */\n    $scope.save = function () {\n        endpoint.save($scope.editDetail).then(function (data) {\n            $globalMessages.clearMessages();\n            $scope.$fieldErrors = undefined;\n            if (!$scope.exists) {\n                $scope.$broadcast('formReset');\n                $location.path(baseUrl + '/' + data.id);\n            } else {\n                $scope.editDetail = undefined;\n                $scope.detail = data;\n                update();\n            }\n        }, function (response) {\n            if (!response.data.fieldErrors) {\n                $scope.$fieldErrors = undefined;\n                return;\n            }\n            // group by field\n            var fieldErrors = {};\n            _.forEach(response.data.fieldErrors, function (fieldError) {\n                fieldErrors[fieldError.field] = fieldErrors[fieldError.field] || [];\n                fieldErrors[fieldError.field].push(fieldError.message);\n            });\n\n            $scope.$fieldErrors = fieldErrors;\n            $scope.$broadcast('fieldErrors', fieldErrors);\n        });\n    };\n\n    if ($scope.exists) {\n        if (_.isUndefined($scope.detail)) {\n            reload();\n        } else {\n            update();\n        }\n    } else {\n        if (_.isUndefined($scope.detail)) {\n            $scope.add();\n        } else {\n            $scope.edit();\n        }\n    }\n\n\n    // TABS\n    $scope.baseTabsController = ['$scope', function ($tabsScope) {\n        $controller('CatBaseTabsController', {\n            $scope: $tabsScope,\n            config: config\n        });\n    }];\n\n    try {\n        // extend with custom controller\n        $controller(config.controller, {\n            $scope: $scope,\n            detail: config.detail,\n            parents: config.parents,\n            config: config\n        });\n    } catch (unused) {\n        $log.info('Couldn\\'t instantiate controller with name ' + config.controller);\n    }\n}\n\nangular.module('cat.controller.base.detail').controller('CatBaseDetailController', CatBaseDetailController);","\n\n/**\n * @ngdoc function\n * @name CatBaseListController\n * @controller\n *\n * @description\n * The CatBaseListController takes care of providing several common properties to the scope\n * of every list page. It also instantiates the controller given via the config.controller parameter and shares\n * the same scope with it. In addition it has a common template 'cat-base-list.tpl.html' which shows a title,\n * new button and provides the cat-paginated directive.\n *\n * Common properties include:\n * * listData - the listData to be used by cat-paginated\n * * title - the title of the view\n * * searchProps - the list of search properties passed on to the cat-paginated directive\n * * config - the config object used to instantiate this view\n *\n * @param $scope\n * @param $controller\n * @param $log\n * @param catBreadcrumbsService\n * @param {Object} config holds data like the listData object, the template url, base url, the model constructor, etc.\n * @constructor\n */\nfunction CatBaseListController($scope, $controller, $log, catBreadcrumbsService, config) {\n    if (!_.isUndefined(config.listData)) {\n        this.titleKey = 'cc.catalysts.cat-breadcrumbs.entry.' + config.listData.endpoint.getEndpointName();\n\n        catBreadcrumbsService.set([\n            {\n                title: config.title,\n                key: this.titleKey\n            }\n        ]);\n\n        $scope.listData = config.listData;\n    } else {\n        $log.warn('No listData available!');\n    }\n\n    this.title = config.title;\n    this.searchProps = config.searchProps;\n    this.config = config;\n\n    this.getUrlForId = function (id) {\n        return '#' + config.baseUrl + '/' + id;\n    };\n\n    this.getUrlForNewPage = function () {\n        return this.getUrlForId('new');\n    };\n\n\n    try {\n        // extend with custom controller\n        $controller(config.controller, {$scope: $scope, listData: config.listData, config: config});\n    } catch (unused) {\n        $log.info('Couldn\\'t instantiate controller with name ' + config.controller);\n    }\n}\n\nangular.module('cat.controller.base.list')\n    .controller('CatBaseListController',\n    ['$scope', '$controller', '$log', 'catBreadcrumbsService', 'config', CatBaseListController]);\n","\n\nfunction CatBaseTabsController($scope, $controller, $routeParams, $location, config) {\n    var endpoint = config.endpoint;\n\n    $scope.tabs = config.tabs;\n    $scope.tabNames = _.map(config.tabs, 'name');\n    $scope.activeTab = {};\n\n    $scope.activateTab = function (tab) {\n        $scope.$broadcast('tab-' + tab + '-active');\n        _.forEach($scope.tabs, function (currentTab) {\n            $scope.activeTab[currentTab.name] = false;\n        });\n        $scope.activeTab[tab] = true;\n    };\n\n    $scope.selectTab = function (tabName) {\n        if (_.isUndefined($location.search().tab) && tabName === $scope.tabNames[0]) {\n            // don't add 'default' tab to url\n            return;\n        }\n        $location.search('tab', tabName);\n    };\n\n    var isTabActive = function (tab) {\n        if (tab.name === $scope.tabNames[0] && _.isUndefined($routeParams.tab)) {\n            // first tab is active if no parameter is given\n            return true;\n        }\n        return $routeParams.tab === tab.name;\n    };\n\n    $scope.$watchCollection(function () {\n        return $location.search();\n    }, function (newValue) {\n        if (_.isString(newValue.tab)) {\n            $scope.activateTab(newValue.tab);\n        } else if (_.isUndefined(newValue.tab)) {\n            // activate first tab if undefined\n            $scope.activateTab($scope.tabNames[0]);\n        }\n    });\n\n    $scope.getTabName = function (tab) {\n        return window.cat.util.pluralize(window.cat.util.capitalize(tab));\n    };\n\n    _.forEach($scope.tabs, function (tab) {\n        $scope.activeTab[tab.name] = isTabActive(tab);\n    });\n\n    // TODO replace by url resolver service as soon as it is available\n    var parentUrl = endpoint.getEndpointName();\n    var parentTemplateNamePrefix = endpoint.getEndpointName();\n\n    var currentEndpoint = endpoint;\n\n    while (!_.isUndefined(currentEndpoint.parentEndpoint)) {\n        currentEndpoint = endpoint.parentEndpoint;\n        var parentEndpointName = currentEndpoint.getEndpointName();\n\n        parentUrl = parentEndpointName + '/' + parentUrl;\n\n        parentTemplateNamePrefix = parentEndpointName + '-' + parentTemplateNamePrefix;\n    }\n\n    $scope.getTabTemplate = function (tab) {\n        return parentUrl + '/' + tab + '/' + parentTemplateNamePrefix + '-' + tab + '-list.tpl.html';\n    };\n\n    var _getDefaultTabControllerName = function (tab) {\n        return window.cat.util.capitalize(endpoint.getEndpointName()) + window.cat.util.capitalize(tab.name) + 'Controller';\n    };\n\n    var _getTabControllerName = function (tab) {\n        if (!!tab.controller) {\n            return tab.controller;\n        }\n\n        return _getDefaultTabControllerName(tab);\n    };\n\n    var tabIndex = 0;\n\n    $scope.tabController = ['$scope', 'catListDataLoadingService', function ($tabScope, catListDataLoadingService) {\n        var activeTab = $scope.tabs[tabIndex++];\n        var tabControllerName = _getTabControllerName(activeTab);\n\n        $tabScope.getSearchRequest = function () {\n            return new window.cat.SearchRequest();\n        };\n\n        $tabScope.getEndpoint = function () {\n            return config.detail[activeTab.name];\n        };\n\n        $tabScope.loadListData = function () {\n            catListDataLoadingService.load($tabScope.getEndpoint(), $tabScope.getSearchRequest()).then(function (data) {\n                $tabScope.listData = data;\n            });\n        };\n\n        $tabScope.$on('tab-' + activeTab.name + '-active', function () {\n            if (_.isUndefined($scope.listData)) {\n                $tabScope.loadListData();\n            }\n        });\n\n        $controller(tabControllerName, {\n            $scope: $tabScope,\n            detail: config.detail,\n            parents: config.parents,\n            config: config\n        });\n\n        if ($scope.activeTab[activeTab.name] === true) {\n            $scope.activateTab(activeTab.name);\n        }\n    }];\n}\n\nangular.module('cat.controller.base.tabs').controller('CatBaseTabsController', CatBaseTabsController);","\n\nfunction CatSelectLink(scope, element) {\n    element.addClass('form-control');\n}\n\nvar fetchElements = function (endpoint, sort) {\n    return function (queryParams) {\n        var searchRequest = new window.cat.SearchRequest(queryParams.data);\n        searchRequest.sort(sort || { property: 'name', isDesc: false });\n        return endpoint.list(searchRequest).then(queryParams.success);\n    };\n};\n\nfunction CatSelectController($scope, $log, catApiService, catSelectConfigService) {\n\n    var options = catSelectConfigService.getConfig($scope.config, $scope.options);\n\n    if (_.isUndefined(options)) {\n        throw new Error('At least one of \"config\" or \"options\" has to be specified');\n    }\n\n    var transport,\n        quietMillis,\n        searchRequestFunc = options.search || function (term, page) {\n            return {\n                'search.name': term,\n                page: page\n            };\n        },\n        filterFunc = options.filter || function (term) {\n            return true;\n        };\n    if (_.isArray(options.endpoint)) {\n        transport = function (queryParams) {\n            return queryParams.success({\n                elements: options.endpoint\n            });\n        };\n        quietMillis = 0;\n    } else if (_.isFunction(options.endpoint)) {\n        transport = options.endpoint;\n        quietMillis = 500;\n    } else if (_.isObject(options.endpoint)) {\n        transport = fetchElements(options.endpoint, options.sort);\n        quietMillis = 500;\n    } else if (_.isString(options.endpoint)) {\n        var api = catApiService[options.endpoint];\n        if (!api) {\n            $log.error('No api endpoint \"' + options.endpoint + '\" defined');\n            $scope.elements = [];\n            return;\n        }\n        transport = fetchElements(api, options.sort);\n        quietMillis = 500;\n    } else {\n        $log.error('The given endpoint has to be one of the following types: array, object, string or function - but was ' + (typeof options.endpoint));\n        $scope.elements = [];\n        return;\n    }\n\n    $scope.selectOptions = _.assign({\n        placeholder: ' ', // space in default placeholder is required, otherwise allowClear property does not work\n        minimumInputLength: 0,\n        adaptDropdownCssClass: function (cssClass) {\n            if (_.contains(['ng-valid', 'ng-invalid', 'ng-pristine', 'ng-dirty'], cssClass)) {\n                return cssClass;\n            }\n            return null;\n        },\n        ajax: {\n            data: searchRequestFunc,\n            quietMillis: quietMillis,\n            transport: transport,\n            results: function (data, page) {\n                var more = (page * options.size || 100) < data.totalCount;\n                return {\n                    results: _.filter(data.elements, filterFunc),\n                    more: more\n                };\n            }\n        },\n        formatResult: function (element) {\n            return element.name;\n        },\n        formatSelection: function (element) {\n            return element.name;\n        }\n    }, options['ui-select2']);\n}\n\n/**\n * @ngdoc directive\n * @scope\n * @restrict EA\n * @description\n *\n * The 'cat-select' directive is a wrapper around the 'ui-select2' directive which adds support for using an api\n * endpoint provided by catApiService. There exist 2 supported ways of configuration:\n * - The 'config' attribute: This represents a named configuration which will be retrieved from the catSelectConfigService\n * - The 'options' attribute: Here the options object can directly be passed in\n *\n * The 2 different approaches exist to easily reuse certain options, as the named config is seen as 'default' and all\n * values which are provided via the options object will be overridden.\n *\n * An config / options object has the following properties:\n * - endpoint: This can either be an array, in which case it will directly be treated as the source, an endpoint name\n * or an endpoint object to call the given endpoint, or a function which is used as the 'transport' function\n * - sort: An object which defines the 'sort' property and direction used when retrieving the list from an endpoint\n * - ui-select2: An config object which supports all options provided by the 'ui-select2' directive\n *\n *\n * @returns {{\n *      restrict: string,\n *      replace: boolean,\n *      priority: number,\n *      scope: {\n *          options: string,\n *          id: string,\n *          config: string\n *      },\n *      link: CatSelectLink,\n *      controller: CatSelectController,\n *      template: string\n * }}\n * @constructor\n */\nfunction CatSelectDirective() {\n    return {\n        restrict: 'EA',\n        replace: true,\n        priority: 1,\n        scope: {\n            options: '=?',\n            id: '@',\n            config: '@?'\n        },\n        link: CatSelectLink,\n        controller: CatSelectController,\n        template: '<input type=\"text\" ui-select2=\"selectOptions\">'\n    };\n}\n\nangular.module('cat.directives')\n    .directive('catSelect', CatSelectDirective);\n","\n\n/**\n * A CatApiEndpoint wraps several helper functions to easily execute backend calls for the base CRUD operations.\n * It also adds support for 'children' which can only be used by resolving them for a parent id.\n * @param {string} url the base url which is added before the configured urls\n * @param {object} endpointConfig the configuration of this endpoint - holds properties like name, url, the model and children\n * @param {object} $http the angular $http service which handles the actual xhr requests\n * @constructor\n */\nfunction CatApiEndpoint(url, endpointConfig, $http) {\n    var that = this;\n\n    var _endpointName = endpointConfig.name;\n    var _endpointUrl = url + (endpointConfig.config.url || endpointConfig.name);\n    var ModelClass = endpointConfig.config.model;\n    var _childEndpointSettings = endpointConfig.children;\n\n    /**\n     * This helper function initializes all configured child endpoints by creating the appropriate url by appending\n     * the given id before initializing them.\n     * @return {object} a object holding all resolved child endpoints for the given id\n     * @private\n     */\n    var _res = _.memoize(function (id) {\n        var url = _endpointUrl + '/' + id + '/';\n        var ret = {};\n        _.forEach(_.keys(_childEndpointSettings), function (path) {\n            ret[path] = new CatApiEndpoint(url, _childEndpointSettings[path], $http);\n            ret[path].parentEndpoint = that;\n            ret[path].parentId = id;\n            ret[path].parentInfo = function () {\n                return that.info(id);\n            };\n        });\n        return ret;\n    });\n\n    /**\n     * This helper method initializes a new instance of the configured model with the given data and adds all child\n     * endpoints to it.\n     * @param data the data received from the backend which is used to initialize the model\n     * @return {Object} an instance of the configured model initialized with the given data and the resolved child\n     * endpoints\n     * @private\n     */\n    var _mapResponse = function (data) {\n        var object = new ModelClass(data);\n        return _.merge(object, _res(object.id));\n    };\n\n    /**\n     * This helper methods deletes all child endpoints from the given object.\n     * @param {object} object the object to remove the child endpoints from\n     * @return {object} the passed in object without the child endpoints\n     * @private\n     */\n    var _removeEndpoints = function (object) {\n        var endpoints = _res(object.id);\n        _.forEach(_.keys(endpoints), function (key) {\n            delete object[key];\n        });\n        return object;\n    };\n\n    /**\n     * This helper method turns a cat.SearchRequest in to en url encoded search query\n     * @param {window.cat.SearchRequest} [searchRequest] the search request which should be url encoded\n     * @return {string} either the url encoded search query or an empty string if no search request is given or it is not a instance of cat.SearchRequest\n     * @private\n     */\n    var _getSearchQuery = function (searchRequest) {\n        return !!searchRequest && searchRequest instanceof window.cat.SearchRequest ? '?' + searchRequest.urlEncoded() : '';\n    };\n\n    /**\n     * This method is used to instantiate actual child api endpoints which are dependent on a certain parent id\n     * @param id the id for which to 'resolve' the child endpoints.\n     * @return {object} a object which maps all child endpoint names to the actual endpoints where the url was resolved\n     * with the provided id\n     */\n    this.res = function (id) {\n        return _res(id);\n    };\n\n    /**\n     * A small helper function to retrieve the actual url this endpoint resolved to.\n     * @return {string} the resolved url of this endpoint\n     */\n    this.getEndpointUrl = function () {\n        return _endpointUrl;\n    };\n\n    /**\n     * A small helper to retrieve the name of the endpoint.\n     * @return {string} the name of this endpoint\n     */\n    this.getEndpointName = function () {\n        return _endpointName;\n    };\n\n    /**\n     * This function calls the url available via #getEndpointUrl without further modification apart from adding search\n     * parameters if the searchRequest parameter is provided. It can handle either an array response in which case all\n     * elements will be mapped to the appropriate configured model or a 'paginated' result in which case an object\n     * with totalCount, facests and elements will be returned.\n     *\n     * @param {SearchRequest} [searchRequest] if given searchRequest#urlEncoded() will be added to the request url\n     * @return {[{object}]|{totalCount: {Number}, facets: [{Facet}], elements: []}} a promise wrapping either a list of\n     * instances of the configured model or a wrapper object which holds not only the list but pagination information\n     * as well\n     */\n    this.list = function (searchRequest) {\n        return $http.get(_endpointUrl + _getSearchQuery(searchRequest)).then(function (response) {\n            if (!!response.data.totalCount || response.data.totalCount === 0) {\n                var facets = [];\n\n                if (!!response.data.facets) {\n                    facets = _.map(response.data.facets, function (facet) {\n                        return new window.cat.Facet(facet);\n                    });\n                }\n\n                var result = {\n                    totalCount: response.data.totalCount,\n                    facets: facets,\n                    elements: _.map(response.data.elements, function (elem) {\n                        return _mapResponse(elem);\n                    })\n                };\n\n                delete response.data.totalCount;\n                delete response.data.elements;\n                delete response.data.facets;\n\n                return _.assign(result, response.data);\n            } else {\n                return _.map(response.data, function (elem) {\n                    return _mapResponse(elem);\n                });\n            }\n        });\n    };\n\n    /**\n     * A helper function which adds '/all' to the request url available via #getEndpointUrl and maps the response to\n     * the configured model.\n     * @return [{object}] a promise wrapping an array of new instances of the configured model initialized with the data retrieved from\n     * the backend\n     */\n    this.all = function () {\n        return $http.get(_endpointUrl + '/all').then(function (response) {\n            return _.map(response.data, function (elem) {\n                return _mapResponse(elem);\n            });\n        });\n    };\n\n    /**\n     * This method makes a GET request to the url available via #getEndpointUrl with the addition of the provided id at the end.\n     * @param id the id which will be appended as '/:id' to the url\n     * @return {object} a promise wrapping a new instance of the configured model initialized with the data retrieved\n     * from the backend\n     */\n    this.get = function (id) {\n        return $http.get(_endpointUrl + '/' + id).then(function (response) {\n            return _mapResponse(response.data);\n        });\n    };\n\n\n    /**\n     * This method makes a GET the url available via #getEndpointUrl with the addition of the provided id at the end + the\n     * 'info' request parameter.\n     * @param id the id which will be appended as '/:id' to the url\n     * @return {*} a promise wrapping the data retrieved from the backend\n     */\n    this.info = function (id) {\n        return $http.get(_endpointUrl + '/' + id + '?info').then(function (response) {\n            return response.data;\n        });\n    };\n\n\n    /**\n     * This method is either makes a PUT or POST request to the backend depending on wheter or not the given object\n     * has an 'id' attribute.\n     * For PUT requests the url resolves to #getEndpointUrl + /:id, for POST requests it is just the #getEndpointUrl\n     * @param {object} object the object which should be sent to the sever. it is stripped of all child endpoints before\n     * it is sent.\n     * @return {object} a promise wrapping a new instance of the configured model initialized with the data retrieved\n     * from the backend\n     */\n    this.save = function (object) {\n        if (!!object.id) {\n            return $http.put(_endpointUrl + '/' + object.id, _removeEndpoints(object)).then(function (response) {\n                return _mapResponse(response.data);\n            });\n        } else {\n            return $http.post(_endpointUrl, _removeEndpoints(object)).then(function (response) {\n                return _mapResponse(response.data);\n            });\n        }\n    };\n\n    /**\n     * This method executes a DELETE request to the url available via #getEndpointUrl with the addition of the provided url at the end.\n     * @param url the url to be appended to the endpoint url - usually only the id of the object to delete\n     * @return {*} The promise returned by the $http 'DELETE' call\n     */\n    this.remove = function (url) {\n        return $http({method: 'DELETE', url: _endpointUrl + '/' + url});\n    };\n\n    /**\n     * Simple wrapper object which contains the custom get, put and post methods\n     * @type {{}}\n     */\n    this.custom = {};\n\n    /**\n     * This method executes a GET request to the url available via #getEndpointUrl joined with the provided one.\n     * Be aware that the result of the promise will not be mapped to the configured model but instead will be passed on directly.\n     * @param url the url to be appended to the endpoint url\n     * @param searchRequest an optional cat.SearchRequest to be applied to the request\n     * @return {*} The promise returned by the $http.get call\n     */\n    this.custom.get = function (url, searchRequest) {\n        return $http.get([_endpointUrl, url].join('/') + _getSearchQuery(searchRequest));\n    };\n\n    /**\n     * This method executes a POST request to the url available via #getEndpointUrl joined with the provided one.\n     * Be aware that the result of the promise will not be mapped to the configured model but instead will be passed on directly.\n     * @param url the url to be appended to the endpoint url\n     * @param object hte object to send as payload - not that it will be used as is for this request\n     * @return {*} The promise returned by the $http.post call\n     */\n    this.custom.post = function (url, object) {\n        return $http.post([_endpointUrl, url].join('/'), object);\n    };\n\n    /**\n     * This method executes a PUT request to the url available via #getEndpointUrl joined with the provided one.\n     * Be aware that the result of the promise will not be mapped to the configured model but instead will be passed on directly.\n     * @param url the url to be appended to the endpoint url\n     * @param object hte object to send as payload - not that it will be used as is for this request\n     * @return {*} The promise returned by the $http.put call\n     */\n    this.custom.put = function (url, object) {\n        return $http.put([_endpointUrl, url].join('/'), object);\n    };\n}\n\n/**\n * @description\n * An 'EndpointConfig' basically is a wrapper around the configuration for an api endpoint during the configuration\n * phase which is later used to instantiate the actual CatApiEndpoints. It exposes its name, the configuration itself,\n * as well as a map of all its children and helper function to create or receive child endpoint configurations.\n *\n * @param {string} name the name of the endpoint\n * @param {object} config the api endpoint configuration which basically wraps an 'url' and a 'model' attribute.\n * If a 'children' attribute is present as well it will be used to create the appropriate child endpoints automatically,\n * without the need to call the #child method manually - this works to arbitrary deps.\n * @constructor\n */\nfunction EndpointConfig(name, config) {\n    var that = this;\n    this.config = config || {};\n    this.children = {};\n    this.name = name;\n\n    /**\n     * This method method either returns or creates and returns a child api endpoint of the current one.\n     *\n     * @param {string} childName the name of the child endpoint\n     * @param {object} [childConfig] if given a new EndpointConfig will be created as a child of the current one. The\n     * parent property of the created config will point to the current config\n     * @return {EndpointConfig} the child endpoint config with the given name\n     */\n    this.child = function (childName, childConfig) {\n        if (!_.isUndefined(childConfig)) {\n            this.children[childName] = new EndpointConfig(childName, childConfig);\n            this.children[childName].parent = this;\n        }\n\n        return this.children[childName];\n    };\n\n    // this takes care of mapping the 'old' config style to the new builder style\n    if (!_.isUndefined(this.config.children)) {\n        var childrenConfig = this.config.children;\n        delete this.config.children;\n        _.forEach(_.keys(childrenConfig), function (childName) {\n            that.child(childName, childrenConfig[childName]);\n        });\n    }\n}\n\n// this is saved outside so that both $api and catApiService use the same config - will be moved back inside\n// CatApiServiceProvider in a future release\nvar _endpoints = {};\n\n/**\n * @ngdoc service\n * @description\n *\n * The CatApiServiceProvider exposes a single configuration method 'endpoint' which can be used to create or retrieve\n * named endpoint configurations.\n *\n * @constructor\n */\nfunction CatApiServiceProvider() {\n    var _urlPrefix = '/api/';\n\n    /**\n     * This method is used to either create or retrieve named endpoint configurations.\n     * @param {string} name the name of the api endpoint to create or retrieve the configuration for\n     * @param {object} [settings] if given a new {EndpointConfig} will be created with the given settings\n     * @return {EndpointConfig} the endpoint config for the given name\n     */\n    this.endpoint = function (name, settings) {\n        if (!_.isUndefined(settings)) {\n            _endpoints[name] = new EndpointConfig(name, settings);\n        }\n        return _endpoints[name];\n    };\n\n\n    this.$get = ['$http',\n        /**\n         * @return {object} returns a map from names to CatApiEndpoints\n         */\n            function $getCatApiService($http) {\n            var catApiService = {};\n\n            _.forEach(_.keys(_endpoints), function (path) {\n                catApiService[path] = new CatApiEndpoint(_urlPrefix, _endpoints[path], $http);\n            });\n\n            return catApiService;\n        }];\n}\nangular.module('cat.service.api').provider('catApiService', CatApiServiceProvider);\n// $api is deprecated, will be removed in a future release\nangular.module('cat.service.api').provider('$api', CatApiServiceProvider);\n","\n\n/**\n * @ngdoc service\n * @name catBreadcrumbService\n * @service\n *\n * @description\n *\n * This service is a simple wrapper around a list of Objects.\n * It provides some convenience methods for manipulating the list.\n * It's main purpose is to make breadcrumb handling less cumbersome.\n *\n * @constructor\n */\nfunction CatBreadcrumbsService() {\n    var _bc = [];\n    var that = this;\n\n    this.clear = function () {\n        _bc = [];\n    };\n\n    this.set = function (bc) {\n        _bc = bc;\n    };\n\n    this.get = function () {\n        return _bc;\n    };\n\n    this.addFirst = function (entry) {\n        _bc.unshift(entry);\n    };\n\n    this.removeFirst = function () {\n        return _bc.shift();\n    };\n\n    this.push = function (entry) {\n        _bc.push(entry);\n    };\n\n    this.pop = function () {\n        return _bc.pop();\n    };\n\n    this.length = function () {\n        return _bc.length;\n    };\n\n    function capitalize(string) {\n        return string.charAt(0).toUpperCase() + string.substring(1);\n    }\n\n    this.replaceLast = function (newVal) {\n        _bc[_bc.length - 1] = newVal;\n    };\n\n    function splitShiftAndJoin(path, amount) {\n        return _.initial(path.split('/'), amount).join('/');\n    }\n\n    /**\n     * This method auto-generates the breadcrumbs from a given view configuration\n     * @param {Object} config a config object as provided to CatBaseDetailController\n     * @return {Array} an array which represents the 'ui stack' of directly related parents\n     */\n    this.generateFromConfig = function (config) {\n        that.clear();\n        var uiStack = [];\n        if (!_.isUndefined(config.endpoint.parentEndpoint)) {\n            var currentEndpoint = config.endpoint;\n            var parentEndpoint = currentEndpoint.parentEndpoint;\n            var parentUrl = config.baseUrl;\n            var count = 0;\n\n            while (!_.isUndefined(parentEndpoint)) {\n                var parent = config.parents[count++];\n                parentUrl = splitShiftAndJoin(parentUrl, 1);\n\n                var detailBreadcrumb = {\n                    url: '#' + parentUrl + '?tab=' + currentEndpoint.getEndpointName(),\n                    title: parent.name\n                };\n                uiStack.unshift(detailBreadcrumb);\n                that.addFirst(detailBreadcrumb);\n\n                parentUrl = splitShiftAndJoin(parentUrl, 1);\n                var breadcrumb = {\n                    title: capitalize(window.cat.util.pluralize(parentEndpoint.getEndpointName())),\n                    key: 'cc.catalysts.cat-breadcrumbs.entry.' + config.endpoint.getEndpointName(),\n                    url: '#' + parentUrl\n                };\n                that.addFirst(breadcrumb);\n\n                currentEndpoint = parentEndpoint;\n                parentEndpoint = currentEndpoint.parentEndpoint;\n            }\n        } else {\n            that.push({\n                title: capitalize(window.cat.util.pluralize(config.endpoint.getEndpointName())),\n                key: 'cc.catalysts.cat-breadcrumbs.entry.' + config.endpoint.getEndpointName(),\n                url: '#' + config.baseUrl\n            });\n        }\n        return uiStack;\n    };\n}\n\nangular.module('cat.service').service('catBreadcrumbsService', CatBreadcrumbsService);\n\n// TODO remove in future release\nangular.module('cat.service').service('$breadcrumbs', CatBreadcrumbsService);","/**\n * Created by tscheinecker on 23.10.2014.\n */\n\n\nfunction CatI18nLocaleService($q, $locale, CAT_I18N_DEFAULT_LOCALE) {\n    this.getLanguageOfLocale = function (locale) {\n        if (_.isUndefined(locale)) {\n            return undefined;\n        }\n\n        if (locale.indexOf('-') !== -1) {\n            return locale.split('-')[0];\n        }\n\n        return locale;\n    };\n\n    this.getCurrentLocale = function () {\n        return $locale.id;\n    };\n\n    this.getDefaultLocale = function () {\n        return CAT_I18N_DEFAULT_LOCALE;\n    };\n}\n\nangular.module('cat.service.i18n')\n/**\n * @ngdoc constant\n * @name CAT_I18N_DEFAULT_LOCALE\n * @constant\n *\n * @description\n * The default locale used for message translation\n */\n    .constant('CAT_I18N_DEFAULT_LOCALE', 'de')\n    .service('catI18nLocaleService', ['$q', '$locale', 'CAT_I18N_DEFAULT_LOCALE', CatI18nLocaleService]);\n","/**\n * Created by tscheinecker on 23.10.2014.\n */\n\n\nfunction CatI18nMessageSourceService($q, catI18nLocaleService, CAT_I18N_DEFAULT_LOCALE) {\n    function _getLocale(locale) {\n        return locale || catI18nLocaleService.getDefaultLocale();\n    }\n\n    function _getMessages(locale) {\n        var localeId = _getLocale(locale);\n\n        var messages = window.cat.i18n[localeId];\n        if (_.isUndefined(messages)) {\n            messages = _getMessages(catI18nLocaleService.getLanguageOfLocale(localeId));\n        }\n        if (localeId !== CAT_I18N_DEFAULT_LOCALE && _.isUndefined(messages)) {\n            messages = _getMessages(CAT_I18N_DEFAULT_LOCALE);\n        }\n\n        return messages;\n    }\n\n    /**\n     * @ngdoc method\n     * @name catI18nMessageSourceService#getMessages\n     * @function\n     *\n     * @description\n     * Function which retrieves a message bundle for a given locale\n     *\n     * @param {String} [locale] the locale in which the messages should be retrieved\n     * @returns {Promise} a promise holding the retrieved message bundle\n     */\n    this.getMessages = function (locale) {\n        return $q.when(_getMessages(locale));\n    };\n\n    /**\n     * @ngdoc method\n     * @name catI18nMessageSourceService#getMessage\n     * @function\n     *\n     * @description\n     * Function which retrieves a message for a given key and locale\n     *\n     * @param {String} key the key of the message to retrieve\n     * @param {String} [locale = CAT_I18N_DEFAULT_LOCALE] the locale in which the messages should be retrieved\n     * @returns {Promise} a promise holding the retrieved message\n     */\n    this.getMessage = function (key, locale) {\n        var bundle = _getMessages(locale);\n        if (_.isUndefined(bundle) || _.isUndefined(bundle[key])) {\n            return $q.reject('No message found for key \\'' + key + '\\' and the given locale \\'' + _getLocale(locale) + '\\'');\n        }\n        return $q.when(bundle[key]);\n    };\n\n\n    /**\n     * @ngdoc method\n     * @name catI18nMessageSourceService#hasMessage\n     * @function\n     *\n     * @description\n     * Function which checks whether or not a message for a given key and locale exists\n     *\n     * @param {String} key the key of the message to retrieve\n     * @param {String} [locale = CAT_I18N_DEFAULT_LOCALE] the locale in which the messages should be available\n     * @returns {Promise} a promise holding <code>TRUE</code> if the key can be resolved for the given locale\n     */\n    this.hasMessage = function (key, locale) {\n        var bundle = _getMessages(locale);\n        return $q.when(!_.isUndefined(bundle) && !_.isUndefined(bundle[key]));\n    };\n}\n\nangular.module('cat.service.i18n')\n/**\n * @ngdoc service\n * @name catI18nMessageSourceService\n * @service\n *\n * @description\n * A service to retrieve message templates for a given key and locale\n *\n *\n * @param $q\n * @param $locale\n * @param CAT_I18N_DEFAULT_LOCALE\n * @constructor\n */\n    .service('catI18nMessageSourceService', ['$q', 'catI18nLocaleService', 'CAT_I18N_DEFAULT_LOCALE', CatI18nMessageSourceService]);\n","/**\n * Created by tscheinecker on 21.10.2014.\n */\n\n\nfunction CatI18nService($q, $log, catI18nMessageSourceService, catI18nMessageParameterResolver) {\n    var that = this;\n\n    /**\n     * @ngdoc method\n     * @name catI18nService#translate\n     * @function\n     *\n     * @description\n     * Tries to resolve the given key to a message of the given locale. The messages are retrieved from the\n     * {@link catI18nMessageSourceService} and then passed through {@link catI18nMessageParameterResolver}.\n     *\n     * @param {String} key the key of the message to be translated\n     * @param {Object|Array} [parameters] message parameters usable in the resolved message\n     * @param {String} [locale = CAT_I18N_DEFAULT_LOCALE] the locale to use for translation\n     * @returns {Promise} Returns a promise of the translated key\n     */\n    this.translate = function (key, parameters, locale) {\n        var deferred = $q.defer();\n        var model = parameters;\n\n        if (_.isArray(parameters)) {\n            parameters.forEach(function (value, idx) {\n                model['p' + idx] = value;\n            });\n        }\n\n        that.canTranslate(key, locale).then(\n            function (canTranslate) {\n                if (canTranslate) {\n                    catI18nMessageSourceService.getMessage(key, locale).then(\n                        function (message) {\n                            try {\n                                deferred.resolve(catI18nMessageParameterResolver(message, model));\n                            } catch (e) {\n                                $log.warn(e);\n                                deferred.reject(e);\n                            }\n                        },\n                        function (reason) {\n                            $log.warn(reason);\n                            deferred.reject(reason);\n                        }\n                    );\n                } else {\n                    var reason = 'No translation for key \\'' + key + '\\' available!';\n                    $log.warn(reason);\n                    deferred.reject(reason);\n                }\n            },\n            deferred.reject\n        );\n        return deferred.promise;\n    };\n\n    /**\n     * @ngdoc method\n     * @name catI18nService#canTranslate\n     * @function\n     *\n     * @description\n     * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.\n     * This is useful when you are dealing with an object that might or might not be a promise, or if\n     * the promise comes from a source that can't be trusted.\n     *\n     * @param {String} key the key of the message to be translated\n     * @param {String} [locale] the locale to use for translation\n     * @returns {Promise} Returns a promise which resolves to true when a message for the given key exists for the\n     * specified locale\n     */\n    this.canTranslate = function (key, locale) {\n        var deferred = $q.defer();\n\n        catI18nMessageSourceService.getMessages(locale).then(\n            function (messages) {\n                deferred.resolve(!_.isUndefined(messages) && !_.isUndefined(messages[key]));\n            },\n            function (reason) {\n                $q.reject(reason);\n            }\n        );\n\n        return deferred.promise;\n    };\n}\n\nangular.module('cat.service.i18n')\n/**\n * @ngdoc value\n * @name catI18nMessageParameterResolver\n * @value\n *\n * @description\n * A function which accepts a message and parameters and returns the resolved message\n */\n    .value('catI18nMessageParameterResolver', function (message, parameters) {\n        return _.template(message, parameters || {}, {interpolate: /{{([\\s\\S\\d]+?)}}/g});\n    })\n\n\n/**\n * @ngdoc service\n * @name catI18nService\n * @service\n *\n * @description\n * A service to translate message keys to messages of specivic locales\n *\n *\n * @param $q\n * @param catI18nMessageSourceService\n * @param catI18nMessageParameterResolver\n * @constructor\n */\n    .service('catI18nService', ['$q', '$log', 'catI18nMessageSourceService', 'catI18nMessageParameterResolver', CatI18nService]);\n","/**\n * Created by tscheinecker on 05.08.2014.\n */\n\n\n\n/**\n * @ngdoc service\n * @description\n * This service provider delegates to the $routeProvider and actually creates 2 separate routes after applying various\n * conventions / defaults\n *\n * @param $routeProvider\n * @constructor\n */\nfunction CatRouteServiceProvider($routeProvider) {\n    var viewNames = [];\n\n    /**\n     * This function creates route urls via convention from the given parameters and passes them (together with the\n     * configuration) to the $routeProvider. The actual route configuration is received by passing the given one\n     * to #window.cat.util.route.list and #window.cat.util.route.detail\n     * @param {string} baseUrl the base url which will be prepended to all routes\n     * @param {string} name the name for which the routes will be created\n     * @param {Object} [config] the config object which wraps the configurations for the list and detail route\n     */\n    this.listAndDetailRoute = function (baseUrl, name, config) {\n        viewNames.push(name);\n\n\n        var listUrl = baseUrl + '/' + window.cat.util.pluralize(name.toLowerCase());\n\n        if (!!config && config.url) {\n            listUrl = baseUrl + '/' + config.url || listUrl;\n        }\n\n        var listConfig = !!config ? config.list : {};\n        var detailsConfig = !!config ? config.details : {};\n        var nameConf = {\n            name: name\n        };\n\n        $routeProvider\n            .when(listUrl, window.cat.util.route.list(_.assign({}, nameConf, listConfig)))\n            .when(listUrl + '/:id', window.cat.util.route.detail(_.assign({}, nameConf, detailsConfig)));\n    };\n\n    /**\n     * This service simply exposes the created view and endpoint names, as the provider basically only delegates\n     * to the $routeProvider\n     * @return {Array} the registered view names\n     */\n    this.$get = function () {\n        return viewNames;\n    };\n}\n\n\nangular.module('cat.service').provider('catRouteService', CatRouteServiceProvider);","/**\n * Created by tscheinecker on 05.08.2014.\n */\n\n\n\nfunction assignDeep(target, source) {\n    return _.assign(target, source, function (targetProperty, sourceProperty) {\n        if (_.isObject(targetProperty) && _.isObject(sourceProperty)) {\n            return assignDeep(targetProperty, sourceProperty);\n        }\n\n        return sourceProperty;\n    });\n}\n\nfunction CatSelectConfigService(configs) {\n    var _configs = configs;\n\n    this.getConfig = function (name, options) {\n        var config = configs[name];\n\n        if (_.isUndefined(config) && _.isUndefined(options)) {\n            return undefined;\n        }\n\n        return assignDeep(_.clone(config) || {}, options);\n    };\n}\n\nfunction CatSelectConfigServiceProvider() {\n    var configs = {};\n\n    this.config = function (name, config) {\n        if (!_.isUndefined(config)) {\n            configs[name] = config;\n        }\n\n        return configs[name];\n    };\n\n    this.$get = function () {\n        return new CatSelectConfigService(configs);\n    };\n}\n\n\nangular.module('cat.service').provider('catSelectConfigService', CatSelectConfigServiceProvider);","/**\n * Created by tscheinecker on 05.08.2014.\n */\n\n\n\n/**\n * @ngdoc service\n * @description\n * This service provider can be used to initialize an api endpoint and the according detail and list routes by simply\n * providing a name and a config object.\n *\n * @param {CatRouteServiceProvider} catRouteServiceProvider\n * @param {CatApiServiceProvider} catApiServiceProvider\n * @constructor\n */\nfunction CatViewServiceProvider(catRouteServiceProvider, catApiServiceProvider) {\n    var viewNames = [];\n    var endpointNames = [];\n\n    /**\n     * This function registers a new api endpoint with catApiServiceProvider and a list and detail route with\n     * catRouteServiceProvider\n     * @param {string} baseUrl the base url which will be prepended to all generated route pats\n     * @param {string} name the name used as entry point to all routes and endpoint creations (camel cased)\n     * @param {object} [config] the config object which can in turn hold objects used for configuration of the endpoint,\n     * detail route or list route\n     */\n    this.listAndDetailView = function (baseUrl, name, config) {\n        var endpointName = name.toLowerCase();\n        var url = window.cat.util.pluralize(endpointName);\n\n        if (!!config) {\n            url = config.url || url;\n        }\n\n        var endpoint = {\n            model: window.cat.util.defaultModelResolver(name),\n            url: url\n        };\n\n        if (!!config) {\n            endpoint = _.assign(endpoint, config.endpoint);\n        }\n\n\n        viewNames.push(name);\n        endpointNames.push(endpointName);\n\n        catApiServiceProvider.endpoint(name.toLowerCase(), endpoint);\n        catRouteServiceProvider.listAndDetailRoute(baseUrl, name, config);\n    };\n\n    /**\n     * This service simply exposes the created view and endpoint names, as the provider basically only delegates\n     * to other service providers\n     * @return {{views: Array, endpoints: Array}}\n     */\n    this.$get = function () {\n        return {\n            views: viewNames,\n            endpoints: endpointNames\n        };\n    };\n}\n\n\nangular.module('cat.service').provider('catViewService', CatViewServiceProvider);","\n\nfunction MenuEntry(menuEntryId, options, parent) {\n    this.id = menuEntryId;\n    this.completeId = parent.completeId + '.' + this.id;\n    var _options = options;\n\n    this.getOptions = function () {\n        return _options;\n    };\n\n    this.isGroup = function () {\n        return false;\n    };\n\n    this.isMenu = function () {\n        return false;\n    };\n}\n\nfunction MenuGroup(groupId, options, parent) {\n    var that = this;\n    this.id = groupId;\n    this.completeId = parent.completeId + '.' + this.id;\n    var _menuEntries = [];\n    var _options = options;\n\n    this.addMenuEntry = function (menuEntryId, options) {\n        _menuEntries.push(new MenuEntry(menuEntryId, options, that));\n    };\n\n    this.getOptions = function () {\n        return _options;\n    };\n\n    this.getEntries = function () {\n        return _.sortBy(_menuEntries, function (entry) {\n            return entry.getOptions().sortOrder || 10000;\n        });\n    };\n\n    this.isGroup = function () {\n        return true;\n    };\n\n    this.isMenu = function () {\n        return false;\n    };\n}\n\nfunction Menu(menuId, options) {\n    var that = this;\n    this.id = menuId;\n    this.completeId = this.id;\n    var _menuEntries = [];\n    var _menuGroups = {};\n    var _options = options;\n\n    this.addMenuGroup = function (groupId, options) {\n        _menuGroups[groupId] = new MenuGroup(groupId, options, that);\n    };\n\n    this.addMenuEntry = function (groupId, menuEntryId, options) {\n        if (_.isUndefined(groupId)) {\n            _menuEntries.push(new MenuEntry(menuEntryId, options, that));\n        } else {\n            _menuGroups[groupId].addMenuEntry(menuEntryId, options);\n        }\n    };\n\n    this.getGroups = function () {\n        return _.sortBy(_.map(_menuGroups, function (menuGroup) {\n            return menuGroup;\n        }), function (menuGroup) {\n            return menuGroup.getOptions().sortOrder || 10000;\n        });\n    };\n\n    this.getEntries = function (groupId) {\n        if (_.isUndefined(groupId)) {\n            return _.sortBy(_menuEntries, function (entry) {\n                return entry.getOptions().sortOrder || 10000;\n            });\n        }\n        return _menuGroups[groupId].getEntries();\n    };\n\n    this.getFlattened = function () {\n        return _.flatten([_menuEntries, _.map(this.getGroups(), function (group) {\n            return[group, group.getEntries()];\n        })]);\n    };\n\n    this.isMenu = function () {\n        return true;\n    };\n\n    this.isGroup = function () {\n        return false;\n    };\n\n    this.getOptions = function () {\n        return _options;\n    };\n}\n\nfunction MenuBar(menuBarId, options) {\n    this.id = menuBarId;\n    var _menus = {};\n    var _options = options;\n\n    this.addMenu = function (menuId, options) {\n        _menus[menuId] = new Menu(menuId, options);\n    };\n\n    this.addMenuGroup = function (menuId, groupId, options) {\n        _menus[menuId].addMenuGroup(groupId, options);\n    };\n\n    this.addMenuEntry = function (menuId, groupId, menuEntryId, options) {\n        _menus[menuId].addMenuEntry(groupId, menuEntryId, options);\n    };\n\n    this.getMenus = function () {\n        return _.map(_menus, function (menu) {\n            return menu;\n        });\n    };\n\n    this.getOptions = function () {\n        return _options;\n    };\n}\n\nfunction MainMenuProvider() {\n    var _mainMenu = new MenuBar('main.menu', {});\n\n    var _menus = [];\n    var _groups = [];\n    var _entries = [];\n\n    this.menu = function (moduleId, options) {\n        _menus.push({\n            menuId: moduleId,\n            options: options\n        });\n    };\n\n    this.menuGroup = function (moduleId, groupId, options) {\n        _groups.push({\n            menuId: moduleId,\n            groupId: groupId,\n            options: options\n        });\n    };\n\n    this.menuEntry = function (moduleId, groupId, entryId, options) {\n        if (_.isUndefined(options)) {\n            options = entryId;\n            entryId = groupId;\n            groupId = undefined;\n        }\n        _entries.push({\n            menuId: moduleId,\n            groupId: groupId,\n            entryId: entryId,\n            options: options\n        });\n    };\n\n    this.$get = function () {\n        _.forEach(_menus, function (menu) {\n            _mainMenu.addMenu(menu.menuId, menu.options);\n        });\n\n        _.forEach(_groups, function (group) {\n            _mainMenu.addMenuGroup(group.menuId, group.groupId, group.options);\n        });\n\n        _.forEach(_entries, function (entry) {\n            _mainMenu.addMenuEntry(entry.menuId, entry.groupId, entry.entryId, entry.options);\n        });\n\n        return _mainMenu;\n    };\n}\n\nangular.module('cat.service').provider('$mainMenu', MainMenuProvider);\n","window.cat = {};\n\nangular.module('cat.controller.base.list', []);\nangular.module('cat.controller.base.tabs', []);\nangular.module('cat.controller.base.detail', ['cat.controller.base.tabs']);\nangular.module('cat.controller', ['cat.controller.base.detail', 'cat.controller.base.list']);\n\nangular.module('cat.template', ['ui.bootstrap.tpls']);\n\nangular.module('cat.service.api', []);\nangular.module('cat.service.i18n', []);\nangular.module('cat.service', ['angularSpinner', 'ngRoute', 'cat.service.api', 'cat.service.i18n']);\n\nangular.module('cat.directives.i18n', ['cat.service.i18n']);\nangular.module('cat.directives', ['cat.template', 'cat.directives.i18n', 'ui.select2', 'ui.bootstrap.pagination']);\n\nangular.module('cat', [\n    'cat.service',\n    'cat.template',\n    'cat.directives',\n    'cat.controller'\n]);\n","\n\nwindow.cat = window.cat || {};\n\n/**\n * A 'FacetTerm' model used in conjunction with the cat-paginated directive where it represents a value of a group or\n * property which can be used to filter the shown list.\n * It consist of an id, a name and a count\n *\n * @param {Object} [data={}] the data used instantiate the object with. Usually this is the object representation\n * returned from the server.\n * @constructor\n */\nwindow.cat.FacetTerm = function (data) {\n    if (data === undefined) data = {};\n\n    this.id = data.id;\n    this.name = data.name;\n    this.count = data.count;\n};\n\n/**\n * A 'Facet' model which is used in conjunction with the cat-paginated directive where it represents a group or\n * which property which can be used to filter the shown list.\n * It has a name and an array of FacetTerms\n *\n * @param {Object} [data={}] the data used instantiate the object with. Usually this is the object representation\n * returned from the server.\n * @constructor\n */\nwindow.cat.Facet = function (data) {\n    if (data === undefined) data = {};\n\n    this.name = data.name;\n    this.terms = _.map(data.facets, function (facet) {\n        return new window.cat.FacetTerm(facet);\n    });\n};","\n\nwindow.cat = window.cat || {};\n\n/**\n * A 'SearchRequest' model used by the catApiService to provide the backend with certain filter, order, page and size\n * parameters.\n *\n *\n * @param {Object} [searchUrlParams] an object representing the search parameters of the current url, which are\n * used to initialize the properties of the SearchRequest\n * @constructor\n */\nwindow.cat.SearchRequest = function (searchUrlParams) {\n\n    var _pagination = {\n        page: 1,\n        size: 100\n    };\n    var _sort = {};\n    var _search = {};\n\n    var lastEncoded;\n\n    if (!!searchUrlParams && !_.isEmpty(searchUrlParams)) {\n        _pagination.page = searchUrlParams.page || _pagination.page;\n        _pagination.size = searchUrlParams.size || _pagination.size;\n        _sort.property = searchUrlParams.sort || _sort.property;\n        _sort.isDesc = searchUrlParams.rev || _sort.isDesc;\n        _.forEach(_.keys(searchUrlParams), function (param) {\n            if (param.indexOf('search.') > -1 && param.length > 7) {\n                _search[param.substring(7)] = searchUrlParams[param];\n            }\n        });\n    }\n\n    var _encodeSort = function () {\n        return (!!_sort.property ? 'sort=' + _sort.property + ':' + ((_sort.isDesc === true || _sort.isDesc === 'true') ? 'desc' : 'asc') : '');\n    };\n\n    var _encodePagination = function () {\n        return 'page=' + (!!_pagination.page ? Math.max(0, _pagination.page - 1) : 0) + '&size=' + _pagination.size || 100;\n    };\n\n    var _concatenate = function (result, next) {\n        if (!result) {\n            return next;\n        }\n\n        if (!next) {\n            return result;\n        }\n        return result + '&' + next;\n    };\n\n    var _encodeSearch = function () {\n        if (!!_search && !_.isEmpty(_search)) {\n            return $.param(_search);\n        }\n\n        return '';\n    };\n\n    var urlEndoded = function () {\n        return _([_encodePagination(), _encodeSort(), _encodeSearch()]).reduce(_concatenate);\n    };\n\n    /**\n     * @param {Object} [pagination] if given this object overrides the current 'pagination' state\n     * @returns {{}} the object representing the current pagination state\n     */\n    this.pagination = function (pagination) {\n        if (pagination === undefined) {\n            return _pagination;\n        } else {\n            _pagination = pagination;\n            return _pagination;\n        }\n    };\n\n\n    /**\n     * @param {Object} [sort] if given this object overrides the current 'sort' state\n     * @returns {{}} the object representing the current sort state\n     */\n    this.sort = function (sort) {\n        if (sort === undefined) {\n            return _sort;\n        } else {\n            _sort = sort;\n            return _sort;\n        }\n    };\n\n    /**\n     * @param {Object} [search] if given this object overrides the current 'search' state\n     * @returns {{}} the object representing the current search state\n     */\n    this.search = function (search) {\n        if (search === undefined) {\n            return _search;\n        } else {\n            _search = search;\n            return _search;\n        }\n    };\n\n    /**\n     * @returns {String} a string representation of the current SearchRequest which can be used as part of the request\n     * url\n     */\n    this.urlEncoded = function () {\n        lastEncoded = urlEndoded();\n        return lastEncoded;\n    };\n\n    /**\n     * @returns {boolean} <code>true</code> if something changed since the last time {@link this#urlEncoded} was called\n     */\n    this.isDirty = function () {\n        return lastEncoded !== urlEndoded();\n    };\n\n    /**\n     * A small helper function to update the current url to correctly reflect all properties set within this\n     * SearchRequest\n     * @param $location the angular $location service\n     */\n    this.setSearch = function ($location) {\n        var ret = {};\n        ret.page = _pagination.page;\n        ret.size = _pagination.size;\n        if (!!_sort.property) {\n            ret.sort = _sort.property;\n            ret.rev = _sort.isDesc || false;\n        }\n        _.forEach(_.keys(_search), function (s) {\n            ret['search.' + s] = _search[s];\n        });\n        $location.search(ret);\n    };\n};","\nangular.module('cat')\n    .directive('catAutofocus', function CatAutofocusDirective($timeout) {\n        return {\n            restrict: 'A',\n            link: function CatAutofocusLink(scope, element) {\n                $timeout(function () {\n                    if (!_.isUndefined(element.data('select2'))) {\n                        element.select2('open');\n                    } else {\n                        element[0].focus();\n                    }\n                }, 100);\n            }\n        };\n    });\n","\nangular.module('cat')\n    .directive('catCheckbox', function CatCheckboxDirective() {\n        return {\n            replace: true,\n            restrict: 'E',\n            scope: {\n                checked: '='\n            },\n            link: function CatCheckboxLink(scope, element) {\n                if (!!scope.checked) {\n                    element.addClass('glyphicon glyphicon-check');\n                } else {\n                    element.addClass('glyphicon glyphicon-unchecked');\n                }\n            }\n        };\n    });","\nangular.module('cat')\n    .directive('catConfirmClick', function CatConfirmClickDirective() {\n        return {\n            restrict: 'A',\n            link: function CatConfirmClickLink(scope, element, attr) {\n                var msg = attr.catConfirmClick || 'Are you sure?';\n                var clickAction = attr.catOnConfirm;\n                element.bind('click', function (event) {\n                    if (window.confirm(msg)) {\n                        scope.$eval(clickAction);\n                    }\n                });\n            }\n        };\n    });\n","\nangular.module('cat')\n    .directive('catFacets', function CatFacetsDirective() {\n        function _initDefaults(scope) {\n            if (_.isUndefined(scope.listData)) {\n                scope.listData = scope.$parent.listData;\n            }\n        }\n\n        function _checkConditions(scope) {\n            if (_.isUndefined(scope.listData)) {\n                throw new Error('listData was not defined and couldn\\'t be found with default value');\n            }\n\n            if (_.isUndefined(scope.listData.facets)) {\n                throw new Error('No facets are available within given listData');\n            }\n        }\n\n        return {\n            replace: true,\n            restrict: 'E',\n            scope: {\n                listData: '=?',\n                names: '='\n            },\n            require: '^catPaginated',\n            templateUrl: 'template/cat-facets.tpl.html',\n            link: function CatFacetsLink(scope, element, attrs, catPaginatedController) {\n                _initDefaults(scope);\n                _checkConditions(scope);\n\n                scope.catPaginatedController = catPaginatedController;\n            },\n            controller: function CatFacetsController($scope) {\n                $scope.isActive = function (facet) {\n                    return !!$scope.catPaginatedController.getSearch()[facet.name];\n                };\n\n                function _search(search) {\n                    return $scope.catPaginatedController.getSearchRequest().search(search);\n                }\n\n                $scope.facetName = function (facet) {\n                    if ($scope.names !== undefined && $scope.names[facet.name] !== undefined) {\n                        return $scope.names[facet.name];\n                    } else {\n                        return facet.name;\n                    }\n                };\n\n                $scope.facets = {};\n\n                $scope.facetChanged = function (facet) {\n                    var search = _search();\n                    var value = $scope.facets[facet.name];\n                    if (!!value) {\n                        search[facet.name] = value;\n                    } else {\n                        delete search[facet.name];\n                    }\n                };\n\n                $scope.initFacets = function () {\n                    _.forEach($scope.listData.facets, function (facet) {\n                        if ($scope.isActive(facet)) {\n                            $scope.facets[facet.name] = $scope.catPaginatedController.getSearch()[facet.name];\n                        }\n                    });\n                };\n\n                $scope.facetSelectOptions = {\n                    allowClear: true\n                };\n            }\n        };\n    });\n","/**\n * Created by tscheinecker on 05.05.2014.\n */\n\n\nangular.module('cat')\n    .directive('catFieldErrors', function CatFieldErrorsDirective() {\n        return {\n            replace: 'true',\n            restrict: 'E',\n            scope: {\n                errors: '=',\n                name: '@'\n            },\n            template: '<div class=\"label label-danger\" ng-if=\"errors[name]\"><ul><li ng-repeat=\"error in errors[name]\">{{error}}</li></ul></div>'\n        };\n    });","/**\n * Created by tscheinecker on 21.10.2014.\n */\n\nangular.module('cat.directives.i18n')\n    .directive('catI18n', ['$log', '$rootScope', 'catI18nService', function CatI18nDirective($log, $rootScope, catI18nService) {\n        function _translate(scope, element) {\n            if (!scope.key) {\n                $log.warn('No key was given for cat-i18n!');\n                return;\n            }\n            catI18nService.translate(scope.key, scope.params).then(\n                function (message) {\n                    element.text(message);\n                }, function (reason) {\n                    // TODO - introduce a handler service for this case - eg show '##missingkey: somekey##'\n                }\n            );\n        }\n\n\n        return {\n            restrict: 'A',\n            scope: {\n                key: '@catI18n',\n                params: '=?i18nParams',\n                watchParams: '=?i18nWatchParams'\n            },\n            link: function CatI18nLink(scope, element) {\n                _translate(scope, element);\n\n                if (!!scope.params && scope.watchParams === true) {\n                    scope.$watch('params', function () {\n                        _translate(scope, element);\n                    }, true);\n                }\n\n                $rootScope.$on('cat-i18n-refresh', function () {\n                    _translate(scope, element);\n                });\n            }\n        };\n    }]);\n","/**\n * Created by tscheinecker on 05.05.2014.\n */\n\n\nangular.module('cat')\n    .directive('input', function CatInputDirective() {\n        return {\n            require: 'ngModel',\n            restrict: 'E',\n            link: function CatInputLink(scope, element, attrs, ctrl) {\n                scope.$on('fieldErrors', function (event, fieldErrors) {\n                    if (!fieldErrors || !attrs.id) {\n                        return;\n                    }\n                    var valid = !fieldErrors[attrs.id];\n                    ctrl.$setValidity(attrs.id, valid);\n                });\n            }\n        };\n    })\n    .directive('catInputGroup', function CatInputGroupDirective() {\n        return {\n            restrict: 'A',\n            transclude: true,\n            scope: {\n                errors: '=',\n                label: '@',\n                name: '@'\n            },\n            link: function CatInputGroupLink(scope, element) {\n                element.addClass('form-group');\n            },\n            templateUrl: 'template/cat-input.tpl.html'\n        };\n    });","\nangular.module('cat')\n    .directive('catLoadMore', function CatLoadMoreDirective() {\n        return {\n            replace: true,\n            restrict: 'A',\n            link: function CatLoadMoreLink(scope, element, attrs) {\n                var initialCount = parseInt(attrs.catLoadMore);\n                scope.$parent.elementsCount = scope.$parent.elementsCount || initialCount;\n                scope.$parent.elements = scope.$parent.elements || [];\n                scope.$parent.elements.push(element);\n                if (scope.$parent.elements.length > scope.$parent.elementsCount) {\n                    element.addClass('hidden');\n                }\n                if (!element.parent().next().length && scope.$parent.elements.length > scope.$parent.elementsCount) {\n                    var elt = $('<a href=\"#\">Show more</a>');\n                    elt.on({\n                        click: function () {\n                            scope.$parent.elementsCount += initialCount;\n                            if (scope.$parent.elements.length <= scope.$parent.elementsCount) {\n                                elt.addClass('hidden');\n                            }\n                            scope.$parent.elements.forEach(function (elt, ind) {\n                                if (ind < scope.$parent.elementsCount) {\n                                    elt.removeClass('hidden');\n                                }\n                            });\n                            return false;\n                        }\n                    });\n                    element.parent().after(elt);\n                }\n            }\n        };\n    });\n","\nangular.module('cat')\n    .directive('catMainMenu', ['$mainMenu', '$rootScope', function CatMainMenuDirective($mainMenu, $rootScope) {\n        return {\n            restrict: 'E',\n            scope: {\n            },\n            link: function CatMainMenuLink(scope) {\n                scope.menus = $mainMenu.getMenus();\n                scope.isVisible = function (entry) {\n                    var visible = false;\n                    if (entry.isMenu() || entry.isGroup()) {\n                        _.forEach(entry.getEntries(), function (subEntry) {\n                            visible = visible || scope.isVisible(subEntry);\n                        });\n                        if (entry.isMenu()) {\n                            _.forEach(entry.getGroups(), function (groups) {\n                                visible = visible || scope.isVisible(groups);\n                            });\n                        }\n                    } else {\n                        return scope.isAllowed(entry);\n                    }\n                    return visible;\n                };\n                scope.isAllowed = function (entry) {\n                    var rights = entry.getOptions().rights;\n                    if (!!rights) {\n                        if (_.isArray(rights)) {\n                            var allowed = true;\n                            for (var i = 0; i < rights.length; i++) {\n                                allowed = allowed && $rootScope.isAllowed(rights[i]);\n                            }\n                            return allowed;\n                        }\n                        return $rootScope.isAllowed(rights);\n                    }\n                    return true;\n                };\n            },\n            templateUrl: 'template/cat-main-menu.tpl.html'\n        };\n    }]);\n","\nangular.module('cat')\n    .directive('catPaginated', function CatPaginatedDirective($log, catI18nService) {\n        var SEARCH_PROP_KEY = 'cc.catalysts.cat-paginated.search.prop';\n\n        return {\n            replace: true,\n            restrict: 'E',\n            transclude: true,\n            scope: {\n                listData: '=?',\n                syncLocation: '=?'\n            },\n            templateUrl: 'template/cat-paginated.tpl.html',\n            link: function CatPaginatedLink(scope, element, attrs) {\n                if (!!attrs.searchProps) {\n                    scope.searchProps = _.filter(attrs.searchProps.split(','), function (prop) {\n                        return !!prop;\n                    });\n\n                    scope.searchPropertyPlaceholders = {};\n\n                    _.forEach(scope.searchProps, function (searchProp) {\n                        scope.searchPropertyPlaceholders[searchProp] = 'Search by ' + searchProp;\n                        catI18nService.translate(SEARCH_PROP_KEY, {prop: searchProp})\n                            .then(function (message) {\n                                scope.searchPropertyPlaceholders[searchProp] = message;\n                            });\n                    });\n                }\n            },\n            controllerAs: 'catPaginatedController',\n            controller: function CatPaginatedController($scope, $location, $timeout, $rootScope, catListDataLoadingService, catI18nService) {\n                var that = this;\n                var searchTimeout = null, DELAY_ON_SEARCH = 500;\n                var PAGINATION_PREVIOUS_KEY = 'cc.catalysts.cat-paginated.pagination.previous';\n                var PAGINATION_NEXT_KEY = 'cc.catalysts.cat-paginated.pagination.next';\n                var PAGINATION_FIRST_KEY = 'cc.catalysts.cat-paginated.pagination.first';\n                var PAGINATION_LAST_KEY = 'cc.catalysts.cat-paginated.pagination.last';\n\n                if (_.isUndefined($scope.listData)) {\n                    $scope.listData = $scope.$parent.listData;\n                    if (_.isUndefined($scope.listData)) {\n                        throw new Error('listData was not defined and couldn\\'t be found with default value');\n                    }\n                }\n\n                if (_.isUndefined($scope.syncLocation)) {\n                    $scope.syncLocation = _.isUndefined($scope.$parent.detail);\n                }\n\n                $scope.paginationText = {\n                    previous: 'Previous',\n                    next: 'Next',\n                    first: 'First',\n                    last: 'Last'\n                };\n\n                function handlePaginationTextResponse(prop) {\n                    return function (message) {\n                        $scope.paginationText[prop] = message;\n                    };\n                }\n\n\n                function _loadPaginationTranslations() {\n                    catI18nService.translate(PAGINATION_PREVIOUS_KEY).then(handlePaginationTextResponse('previous'));\n                    catI18nService.translate(PAGINATION_NEXT_KEY).then(handlePaginationTextResponse('next'));\n                    catI18nService.translate(PAGINATION_FIRST_KEY).then(handlePaginationTextResponse('first'));\n                    catI18nService.translate(PAGINATION_LAST_KEY).then(handlePaginationTextResponse('last'));\n                }\n\n                _loadPaginationTranslations();\n\n                $rootScope.$on('cat-i18n-refresh', function () {\n                    _loadPaginationTranslations();\n                });\n\n\n                $scope.listData.search = $scope.listData.search || $scope.listData.searchRequest.search() || {};\n\n                var searchRequest = $scope.listData.searchRequest;\n\n                var reload = function (delay) {\n                    $timeout.cancel(searchTimeout);\n                    searchTimeout = $timeout(function () {\n                        if (searchRequest.isDirty()) {\n                            catListDataLoadingService.load($scope.listData.endpoint, searchRequest).then(\n                                function (data) {\n                                    _.assign($scope.listData, data);\n                                }\n                            );\n                        }\n                    }, delay || 0);\n                };\n\n                $scope.$watch('listData.sort', function (newVal) {\n                    if (!!newVal) {\n                        console.log('broadcasting sort changed: ' + angular.toJson(newVal));\n                        $scope.$parent.$broadcast('SortChanged', newVal);\n                    }\n                }, true);\n\n                $scope.$on('SearchChanged', function (event, value, delay) {\n                    searchChanged(value, delay);\n                });\n\n                function updateLocation() {\n                    if ($scope.syncLocation !== false) {\n                        searchRequest.setSearch($location);\n                        $location.replace();\n                    }\n                }\n\n                $scope.$watch('listData.pagination', function () {\n                    updateLocation();\n                    reload();\n                }, true);\n\n                var searchChanged = function (value, delay) {\n                    searchRequest.search(value);\n                    updateLocation();\n                    $scope.listData.pagination.page = 1;\n                    reload(delay);\n                };\n\n                var updateSearch = function (value) {\n                    var search = searchRequest.search();\n                    _.assign(search, value);\n                    $rootScope.$broadcast('SearchChanged', search, DELAY_ON_SEARCH);\n                };\n\n                $scope.$watch('listData.search', updateSearch, true);\n\n                this.sort = function (value) {\n                    searchRequest.sort(value);\n                    updateLocation();\n                    $scope.listData.pagination.page = 1;\n                    reload();\n                };\n\n                this.getSearch = function () {\n                    return searchRequest.search();\n                };\n\n                this.getSearchRequest = function () {\n                    return searchRequest;\n                };\n\n                $scope.$on('SortChanged', function (event, value) {\n                    that.sort(value);\n                });\n            }\n        };\n    });\n","\nangular.module('cat')\n    .directive('catSortable', function CatSortableDirective($compile) {\n        return {\n            restrict: 'AC',\n            require: '^catPaginated',\n            link: function CatSortableLink(scope, element, attrs, catPaginatedController) {\n                var title = element.text();\n                var property = attrs.catSortable || title.toLowerCase().trim();\n\n                // todo - make configurable\n                scope.sort = scope.listData.searchRequest.sort();\n                scope.catPaginatedController = catPaginatedController;\n                var icon = 'glyphicon-sort-by-attributes';\n\n                if (!!attrs.sortMode) {\n                    if (attrs.sortMode === 'numeric') {\n                        icon = 'glyphicon-sort-by-order';\n                    } else if (attrs.sortMode === 'alphabet') {\n                        icon = 'glyphicon-sort-by-alphabet';\n                    }\n                }\n\n                element.text('');\n                element.append($compile('<a class=\"sort-link\" href=\"\" ng-click=\"toggleSort(\\'' + property + '\\')\" cat-i18n=\"cc.catalysts.cat-sortable.sort.' + property + '\">' + title + ' <span class=\"glyphicon\" ng-class=\"{\\'' + icon + '\\': sort.property == \\'' + property + '\\' && !sort.isDesc, \\'' + icon + '-alt\\': sort.property == \\'' + property + '\\' && sort.isDesc}\"></span></a>')(scope));\n            },\n            controller: function CatSortableController($scope) {\n                $scope.toggleSort = function (property) {\n                    if ($scope.sort.property === property) {\n                        $scope.sort.isDesc = !$scope.sort.isDesc;\n                    } else {\n                        $scope.sort.property = property;\n                        $scope.sort.isDesc = false;\n                    }\n\n                    $scope.catPaginatedController.sort($scope.sort);\n                };\n\n                $scope.$on('SortChanged', function (event, value) {\n                    $scope.sort = value;\n                });\n            }\n        };\n    });","\nangular.module('cat')\n    .directive('form', ['$timeout', function CatFormDirective($timeout) {\n        return {\n            restrict: 'E',\n            scope: true,\n            require: 'form',\n            link: function CatFormLink(scope, element, attrs, formCtrl) {\n                var warningMessage = attrs.eocsWarnOnNavIfDirty || 'You have unsaved changes. Leave the page?';\n\n                // TODO - remove this ugly hack if ui-select2 fixes this problem...\n                $timeout(function () {\n                    formCtrl.$setPristine(true);\n                }, 50);\n\n                scope.$on('formReset', function () {\n                    formCtrl.$setPristine(true);\n                });\n\n                scope.$on('formDirty', function () {\n                    formCtrl.$setDirty(true);\n                });\n\n                // handle angular route change\n                scope.$on('$locationChangeStart', function (event) {\n                    if (formCtrl.$dirty) {\n                        if (!window.confirm(warningMessage)) {\n                            event.preventDefault();\n                        }\n                    }\n                });\n\n                // handle browser window/tab close\n                $(window).on('beforeunload', function (event) {\n                    if (formCtrl.$dirty) {\n                        return warningMessage;\n                    }\n                });\n\n                // clean up beforeunload handler when scope is destroyed\n                scope.$on('$destroy', function () {\n                    $(window).unbind('beforeunload');\n                });\n            }\n        };\n    }]);\n","\n\nangular.module('cat')\n    .directive('numbersOnly', function CatNumbersOnlyDirective() {\n        return {\n            require: 'ngModel',\n            link: function CatNumbersOnlyLink(scope, element, attrs, modelCtrl) {\n                modelCtrl.$parsers.push(function (inputValue) {\n                    if (!inputValue) return '';\n\n                    var pattern = '[^0-9]';\n\n                    if (!!attrs.hasOwnProperty('allowFraction')) {\n                        pattern = '[^0-9,.]';\n                    }\n\n                    var transformedInput = inputValue.replace(new RegExp(pattern, 'g'), '');\n\n                    if (transformedInput !== inputValue) {\n                        modelCtrl.$setViewValue(transformedInput);\n                        modelCtrl.$render();\n                    }\n\n                    return transformedInput;\n                });\n            }\n        };\n    });","\nangular.module('cat')\n    .filter('replaceText', function CatReplaceTetFilter() {\n        return function (text, pattern, options, replacement) {\n            if (pattern === undefined)\n                pattern = '\\n';\n            if (options === undefined)\n                options = 'g';\n            if (replacement === undefined)\n                replacement = ', ';\n            if (!text) {\n                return text;\n            } else {\n                return String(text).replace(new RegExp(pattern, options), replacement);\n            }\n        };\n    });\n","\n\nangular.module('cat.service')\n    .factory('catListDataLoadingService', ['catApiService', '$route', '$q', function CatListDataLoadingService(catApiService, $route, $q) {\n        var load = function (endpoint, searchRequest) {\n            var deferred = $q.defer();\n            endpoint.list(searchRequest).then(\n                function success(data) {\n                    var pagination = searchRequest.pagination();\n\n                    var result = {\n                        count: data.totalCount,\n                        collection: data.elements,\n                        pagination: pagination,\n                        firstResult: (pagination.page - 1) * pagination.size + 1,\n                        lastResult: Math.min(pagination.page * pagination.size, data.totalCount),\n                        facets: data.facets,\n                        isSinglePageList: data.totalCount <= pagination.size,\n                        endpoint: endpoint,\n                        searchRequest: searchRequest\n                    };\n\n                    delete data.totalCount;\n                    delete data.elements;\n                    delete data.facets;\n\n                    deferred.resolve(_.assign(result, data));\n                },\n                function error(reason) {\n                    deferred.reject(reason);\n                });\n            return deferred.promise;\n        };\n        /**\n         *\n         * @param {String} endpointName\n         * @param {Object} [defaultSort={property:'name',isDesc:false}]\n         */\n        var resolve = function (endpointName, defaultSort) {\n            var searchRequest = new window.cat.SearchRequest($route.current.params);\n            if (!defaultSort) {\n                defaultSort = {property: 'name', isDesc: false};\n            }\n            if (!!defaultSort && !$route.current.params.sort) {\n                searchRequest.sort(defaultSort);\n            }\n            return load(catApiService[endpointName], searchRequest);\n        };\n\n        return {\n            'load': load,\n            'resolve': resolve\n        };\n    }]);\n","/**\n * Created by tscheinecker on 05.05.2014.\n */\n\n\nangular.module('cat.service')\n    .factory('errorHttpInterceptor', function CatErrorHttpInterceptor($q, $globalMessages, loadingService) {\n        return {\n            'request': function (config) {\n                loadingService.start();\n                return config;\n            },\n            'requestError': function (rejection) {\n                loadingService.stop();\n                return $q.reject(rejection);\n            },\n            'response': function (success) {\n                loadingService.stop();\n                return success;\n            },\n            'responseError': function (rejection) {\n                loadingService.stop();\n                $globalMessages.clearMessages('error');\n\n                if (!!rejection.data.error) {\n                    var error = '[' + rejection.status + ' - ' + rejection.statusText + '] ' + rejection.data.error;\n                    if (!!rejection.data.cause) {\n                        error += '\\n' + rejection.data.cause;\n                    }\n                    $globalMessages.addMessage('error', error);\n                }\n                if (!!rejection.data.globalErrors) {\n                    $globalMessages.addMessages('error', rejection.data.globalErrors);\n                }\n\n                return $q.reject(rejection);\n            }\n        };\n    })\n    .config(function ($httpProvider) {\n        $httpProvider.interceptors.push('errorHttpInterceptor');\n    });\n","/**\n * Created by tscheinecker on 01.06.2014.\n */\n\n\nangular.module('cat.service')\n    .factory('loadingService', function CatLoadingService($rootScope, usSpinnerService, $timeout) {\n        var timeout = 50;\n        var animationDuration = 200;\n        var activeCount = 0;\n        var startTime;\n        var startTimer, stopTimer;\n\n        var start = function () {\n            if (!activeCount && !startTimer) {\n                if (!!stopTimer) {\n                    $timeout.cancel(stopTimer);\n                    stopTimer = undefined;\n                }\n                startTimer = $timeout(function () {\n                    usSpinnerService.spin('loading-spinner');\n                    $rootScope.loading = true;\n                    startTime = new Date().getTime();\n                }, timeout);\n            }\n            activeCount++;\n        };\n\n        var stop = function () {\n            activeCount--;\n            if (!activeCount && !stopTimer) {\n                if (!!startTimer) {\n                    $timeout.cancel(startTimer);\n                    startTimer = undefined;\n                }\n                var now = new Date().getTime();\n                var stopTimeout = timeout + (Math.max((animationDuration - (now - startTime)), 0));\n                stopTimer = $timeout(function () {\n                    usSpinnerService.stop('loading-spinner');\n                    $rootScope.loading = false;\n                }, stopTimeout);\n            }\n        };\n\n        $rootScope.$on('$routeChangeStart', function (event) {\n            start();\n\n        });\n        $rootScope.$on('$routeChangeSuccess', function (event) {\n            stop();\n        });\n        $rootScope.$on('$routeChangeError', function (event) {\n            stop();\n        });\n\n        return {\n            start: start,\n            stop: stop\n        };\n    });\n","/**\n * Created by tscheinecker on 05.05.2014.\n */\n\n\nangular.module('cat.service').service('$globalMessages', function CatGlobalMessages($rootScope) {\n    var messages = {};\n\n    var self = this;\n\n    this.getMessages = function (type) {\n        if (!type) {\n            return [];\n        }\n\n        return messages[type];\n    };\n\n    this.hasMessages = function (type) {\n        if (!type) {\n            return false;\n        }\n\n        return !!messages[type] && messages[type].length !== 0;\n    };\n\n    this.clearMessages = function (type) {\n        if (!type) {\n            messages = {};\n            return;\n        }\n\n        messages[type] = [];\n    };\n\n    this.addMessage = function (type, message) {\n        if (!type) {\n            return;\n        }\n\n        if (!messages[type]) {\n            self.clearMessages(type);\n        }\n\n        messages[type].push(message);\n    };\n\n    this.addMessages = function (type, messages) {\n        if (!type) {\n            return;\n        }\n\n        _.forEach(messages, function (message) {\n            self.addMessage(type, message);\n        });\n    };\n\n    this.setMessages = function (type, messages) {\n        if (!type) {\n            return;\n        }\n\n        self.clearMessages(type);\n        if (!!messages) {\n            self.addMessages(type, messages);\n        }\n    };\n\n    $rootScope.$on('$routeChangeSuccess', function () {\n        self.clearMessages();\n    });\n});\n","/**\n * Created by tscheinecker on 23.10.2014.\n */\n\n\nwindow.cat.i18n = window.cat.i18n || {};\nwindow.cat.i18n.de = window.cat.i18n.de || {};\n\n_.assign(window.cat.i18n.de, {\n    'cc.catalysts.cat-paginated.itemsFound': '{{count}} Einträge gefunden. Einträge {{firstResult}}-{{lastResult}}',\n    'cc.catalysts.cat-paginated.noItemsFound': 'Keine Einträge gefunden',\n    'cc.catalysts.general.new': 'Neu'\n});\n","/**\n * Created by tscheinecker on 23.10.2014.\n */\n\n\nwindow.cat.i18n = window.cat.i18n || {};\nwindow.cat.i18n.en = window.cat.i18n.en || {};\n\n_.assign(window.cat.i18n.en, {\n    'cc.catalysts.cat-paginated.itemsFound': '{{count}} entries found. Entries {{firstResult}}-{{lastResult}}',\n    'cc.catalysts.cat-paginated.noItemsFound': 'No entries found',\n    'cc.catalysts.general.new': 'New'\n});\n","/**\n * Created by tscheinecker on 26.08.2014.\n */\n\n\nwindow.cat.util = window.cat.util || {};\n\nwindow.cat.util.pluralize = function (string) {\n    if (_.isUndefined(string) || string.length === 0) {\n        return '';\n    }\n    var lastChar = string[string.length - 1];\n\n    switch (lastChar) {\n        case 'y':\n            return string.substring(0, string.length - 1) + 'ies';\n        case 's':\n            return string + 'es';\n        default :\n            return string + 's';\n    }\n\n};\n\nwindow.cat.util.capitalize = function (string) {\n    if (_.isUndefined(string) || string.length === 0) {\n        return '';\n    }\n\n    return string.substring(0, 1).toUpperCase() + string.substring(1, string.length);\n};","/**\n * Created by tscheinecker on 01.08.2014.\n */\n\n\n\nwindow.cat.util = window.cat.util || {};\n\nwindow.cat.models = window.cat.models || {};\n\n/**\n * This helper function is used to acquire the constructor function which is used as a 'model' for the api endpoint.\n * @param name the name of the 'entity' for which the constructor has to be returned\n * @returns {Constructor}\n */\nwindow.cat.util.defaultModelResolver = function (name) {\n    return window.cat.models[name];\n};\n\nvar toLowerCaseName = function (name) {\n    if (!name) {\n        return '';\n    }\n    return name.toLowerCase();\n};\n\n/**\n * Helper function to extract the base url from the current route and the parent endpoints\n * @param $route The angular $route service\n * @param {string} [baseUrl]\n * @param {array} [parentEndpointNames]\n * @return {string} the extracted baseUrl which is either the provided one, or one, generated from the parentEndpointNames\n */\nvar getBaseUrl = function ($route, baseUrl, parentEndpointNames) {\n    if (_.isUndefined(baseUrl)) {\n        baseUrl = $route.current.originalPath;\n        if (_.keys($route.current.pathParams).length !== 0) {\n            baseUrl = baseUrl.substring(0, baseUrl.lastIndexOf('/'));\n        }\n        if (_.isArray(parentEndpointNames)) {\n            _.forEach(parentEndpointNames, function (parentEndpointName) {\n                var idName = parentEndpointName + 'Id';\n                baseUrl = baseUrl.replace(':' + idName, $route.current.params[idName]);\n            });\n        }\n    }\n\n    return baseUrl;\n};\n\n/**\n * A helper function for list routes which applies a few optimizations and some auto configuration.\n * In the current state it handles 4 settings:\n * * templateUrl - Auto-generation of the correct templateUrl based on conventions and the config.name property\n * * controller - Auto-generation of the correct controller based on conventions and the config.name property\n * * reloadOnSearch - this property is set to false\n * * resolve - a object with a 'listData' property is returned which is resolved via the correct endpoint\n *\n * @param {Object} config the route config object which will be used to generate the actual route configuration\n * @return {{reloadOnSearch: boolean, controller: string, templateUrl: (string), resolve: {config: Object}}}\n */\nvar listRoute = function (config) {\n    var name = toLowerCaseName(config.name);\n\n    function getListDataPromise(catListDataLoadingService) {\n        return catListDataLoadingService.resolve(config.endpoint || name, config.defaultSort);\n    }\n\n    function getResolvedConfig($q, $route, catListDataLoadingService) {\n        var deferredConfig = $q.defer();\n        var resolvedConfig = {\n            controller: config.controller || config.name + 'Controller',\n            baseUrl: getBaseUrl($route, config.baseUrl),\n            title: window.cat.util.pluralize(config.name),\n            searchProps: config.searchProps || window.cat.util.defaultListSearchProps,\n            listTemplateUrl: config.listTemplateUrl || (name + '/' + name + '-list.tpl.html')\n        };\n\n        getListDataPromise(catListDataLoadingService).then(\n            function (listData) {\n                resolvedConfig.listData = listData;\n                deferredConfig.resolve(resolvedConfig);\n            }\n        );\n\n        return deferredConfig.promise;\n    }\n\n    return {\n        reloadOnSearch: false,\n        controller: 'CatBaseListController',\n        controllerAs: 'catBaseListController',\n        templateUrl: config.templateUrl || 'template/cat-base-list.tpl.html',\n        resolve: {\n            config: getResolvedConfig\n        }\n    };\n};\n\n/**\n * A helper function for detail routes which applies a few optimizations and some auto configuration.\n * The actual instantiated controller will be 'CatBaseDetailController' with a default templateUrl\n * 'template/cat-base-detail.tpl.html'. As the CatBaseDetailController expects a config object with several properties\n * (templateUrls, parents, detail, endpoint, etc.) this function also takes care of providing the correct 'resolve'\n * object which pre-loads all the necessary data.\n * @param {Object} config the route config object which will be used to generate the actual route configuration\n * @returns {{templateUrl: (string), controller: string, reloadOnSearch: (boolean), resolve: {config: (object)}}}\n */\nvar detailRoute = function (config) {\n    var endpointName, parentEndpointNames;\n\n    if (_.isString(config.endpoint)) {\n        endpointName = config.endpoint;\n    } else if (_.isObject(config.endpoint)) {\n        parentEndpointNames = config.endpoint.parents;\n        endpointName = config.endpoint.name;\n    } else {\n        endpointName = toLowerCaseName(config.name);\n    }\n\n    var Model = config.model || window.cat.util.defaultModelResolver(config.name);\n\n    var parentUrl = '';\n    var parentTemplateNamePrefix = '';\n\n\n    if (_.isArray(parentEndpointNames)) {\n        _.forEach(parentEndpointNames, function (parentEndpointName) {\n            parentUrl += parentEndpointName;\n            parentUrl += '/';\n\n            parentTemplateNamePrefix += parentEndpointName;\n            parentTemplateNamePrefix += '-';\n        });\n    }\n\n    var tabs;\n\n    var templateUrls = {\n        edit: parentUrl + endpointName + '/' + parentTemplateNamePrefix + endpointName + '-details-edit.tpl.html',\n        view: parentUrl + endpointName + '/' + parentTemplateNamePrefix + endpointName + '-details-view.tpl.html'\n    };\n\n    if (config.additionalViewTemplate === true) {\n        templateUrls.view = {\n            main: templateUrls.view,\n            additional: parentUrl + endpointName + '/' + parentTemplateNamePrefix + endpointName + '-additional-details-view.tpl.html'\n        };\n    } else if (config.additionalViewTemplate === 'tabs') {\n        templateUrls.view = {\n            main: templateUrls.view,\n            additional: 'template/cat-base-additional-details-tabs-view.tpl.html'\n        };\n        tabs = config.additionalViewTemplateTabs;\n    }\n\n    function getEndpoint($route, catApiService) {\n        var endpoint = catApiService[endpointName];\n\n        if (_.isArray(parentEndpointNames)) {\n            _.forEach(parentEndpointNames, function (parentEndpointName, idx) {\n                var currentEndpoint;\n                if (idx === 0) {\n                    // root api endpoint\n                    currentEndpoint = catApiService[parentEndpointName];\n                } else {\n                    // child api endpoint\n                    currentEndpoint = endpoint[parentEndpointName];\n                }\n                endpoint = currentEndpoint.res($route.current.params[parentEndpointName + 'Id']);\n            });\n\n            endpoint = endpoint[endpointName];\n        }\n\n        return endpoint;\n    }\n\n    function getDetailData($route, $q, endpoint) {\n        var detailPromise;\n        var detailId = $route.current.params.id;\n        if (detailId === 'new') {\n            detailPromise = $q.when(new Model());\n        } else {\n            detailPromise = endpoint.get(detailId);\n        }\n        return detailPromise;\n    }\n\n    function getConfig($route, $q, catApiService) {\n        var deferred = $q.defer();\n        var endpoint = getEndpoint($route, catApiService);\n\n        var baseUrl = getBaseUrl($route, config.baseUrl, parentEndpointNames);\n\n        var resolvedConfig = {\n            controller: config.controller || config.name + 'DetailsController',\n            endpoint: endpoint,\n            Model: Model,\n            templateUrls: templateUrls,\n            tabs: tabs,\n            baseUrl: baseUrl\n        };\n\n\n        var detailPromise = getDetailData($route, $q, endpoint);\n        detailPromise.then(function (data) {\n            resolvedConfig.detail = data;\n        });\n\n        var parentsPromise = getParentInfo($q, endpoint);\n        parentsPromise.then(function (parents) {\n            resolvedConfig.parents = parents;\n        });\n\n        $q.all([detailPromise, parentsPromise]).then(\n            function () {\n                deferred.resolve(resolvedConfig);\n            },\n            function (reason) {\n                deferred.reject(reason);\n            }\n        );\n\n        return deferred.promise;\n    }\n\n    function getParentInfo($q, endpoint) {\n        if (!_.isUndefined(endpoint) && !_.isUndefined(endpoint.parentInfo)) {\n            var deferred = $q.defer();\n            var parents = [];\n            endpoint.parentInfo().then(\n                function (parent) {\n                    parents.push(parent);\n                    getParentInfo($q, endpoint.parentEndpoint).then(\n                        function (response) {\n                            parents.push(response);\n                            parents = _.flatten(parents);\n                            deferred.resolve(parents);\n                        },\n                        function (error) {\n                            deferred.reject(error);\n                        }\n                    );\n                }, function (error) {\n                    deferred.reject(error);\n                });\n            return deferred.promise;\n        } else {\n            return $q.when([]);\n        }\n    }\n\n    return {\n        templateUrl: config.templateUrl || 'template/cat-base-detail.tpl.html',\n        controller: 'CatBaseDetailController',\n        reloadOnSearch: config.reloadOnSearch,\n        resolve: {\n            config: function ($route, $q, catApiService) {\n                return getConfig($route, $q, catApiService);\n            }\n        }\n    };\n};\n\nwindow.cat.util.route = {\n    list: listRoute,\n    detail: detailRoute\n};"],"sourceRoot":"/source/"}